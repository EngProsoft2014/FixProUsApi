//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FixProUsApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_CallReason> Tbl_CallReason { get; set; }
        public virtual DbSet<Tbl_Calls> Tbl_Calls { get; set; }
        public virtual DbSet<Tbl_Campaigns> Tbl_Campaigns { get; set; }
        public virtual DbSet<Tbl_Customers> Tbl_Customers { get; set; }
        public virtual DbSet<Tbl_CustomersCategory> Tbl_CustomersCategory { get; set; }
        public virtual DbSet<Tbl_CustomersCustomField> Tbl_CustomersCustomField { get; set; }
        public virtual DbSet<Tbl_EmployeeAssignItems> Tbl_EmployeeAssignItems { get; set; }
        public virtual DbSet<Tbl_EmployeeAssignItemsLogs> Tbl_EmployeeAssignItemsLogs { get; set; }
        public virtual DbSet<Tbl_EmployeeCategory> Tbl_EmployeeCategory { get; set; }
        public virtual DbSet<Tbl_EmployeeCustomField> Tbl_EmployeeCustomField { get; set; }
        public virtual DbSet<Tbl_Equipments> Tbl_Equipments { get; set; }
        public virtual DbSet<Tbl_EquipmentsCustomField> Tbl_EquipmentsCustomField { get; set; }
        public virtual DbSet<Tbl_Estimate> Tbl_Estimate { get; set; }
        public virtual DbSet<Tbl_EstimateItemsServices> Tbl_EstimateItemsServices { get; set; }
        public virtual DbSet<Tbl_InvoiceItemsServices> Tbl_InvoiceItemsServices { get; set; }
        public virtual DbSet<Tbl_Member> Tbl_Member { get; set; }
        public virtual DbSet<Tbl_Schedule> Tbl_Schedule { get; set; }
        public virtual DbSet<Tbl_ScheduleDate> Tbl_ScheduleDate { get; set; }
        public virtual DbSet<Tbl_SchedulePictures> Tbl_SchedulePictures { get; set; }
        public virtual DbSet<Tbl_StripeAccount> Tbl_StripeAccount { get; set; }
        public virtual DbSet<Tbl_Tax> Tbl_Tax { get; set; }
        public virtual DbSet<Tbl_TimeSheet> Tbl_TimeSheet { get; set; }
        public virtual DbSet<Tbl_TransactionCustomersCustomField> Tbl_TransactionCustomersCustomField { get; set; }
        public virtual DbSet<Tbl_ItemsServices> Tbl_ItemsServices { get; set; }
        public virtual DbSet<Tbl_ScheduleMaterialReceipt> Tbl_ScheduleMaterialReceipt { get; set; }
        public virtual DbSet<Tbl_ScheduleItemsServices> Tbl_ScheduleItemsServices { get; set; }
        public virtual DbSet<Tbl_InvoiceScheduleDate> Tbl_InvoiceScheduleDate { get; set; }
        public virtual DbSet<Tbl_ScheduleEmployees> Tbl_ScheduleEmployees { get; set; }
        public virtual DbSet<Tbl_Invoice> Tbl_Invoice { get; set; }
        public virtual DbSet<Tbl_Payment> Tbl_Payment { get; set; }
        public virtual DbSet<Tbl_Account> Tbl_Account { get; set; }
        public virtual DbSet<Tbl_EstimateScheduleDate> Tbl_EstimateScheduleDate { get; set; }
        public virtual DbSet<Tbl_Branches> Tbl_Branches { get; set; }
        public virtual DbSet<Tbl_EmployeeBranches> Tbl_EmployeeBranches { get; set; }
        public virtual DbSet<Tbl_ItemsServicesCategory> Tbl_ItemsServicesCategory { get; set; }
        public virtual DbSet<Tbl_ItemsServicesSubCategory> Tbl_ItemsServicesSubCategory { get; set; }
        public virtual DbSet<Tbl_OneSignalNotification> Tbl_OneSignalNotification { get; set; }
        public virtual DbSet<Tbl_OurStripeAccount> Tbl_OurStripeAccount { get; set; }
        public virtual DbSet<Tbl_Employee> Tbl_Employee { get; set; }
        public virtual DbSet<Com_Main> Com_Main { get; set; }
        public virtual DbSet<Tbl_AccountPayment> Tbl_AccountPayment { get; set; }
        public virtual DbSet<Tbl_Plans> Tbl_Plans { get; set; }
    
        public virtual ObjectResult<GetSchedualEmployee_Result> GetSchedualEmployee(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedualEmployee_Result>("GetSchedualEmployee", accountIdParameter);
        }
    
        public virtual ObjectResult<Sp_Search_In_All_Jobs_Result> Sp_Search_In_All_Jobs(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Search_In_All_Jobs_Result>("Sp_Search_In_All_Jobs", textParameter);
        }
    
        public virtual int Sp_GetEmp_Remove_Add_CreateSchedule(Nullable<int> scheduleId, string employees, ObjectParameter msgEmpRemove, ObjectParameter msgEmpAdd)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetEmp_Remove_Add_CreateSchedule", scheduleIdParameter, employeesParameter, msgEmpRemove, msgEmpAdd);
        }
    
        public virtual int Sp_DeleteOneSignalNotificationByEmp(Nullable<int> typeDelete, string scheduleId, string scheduleDateId, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var typeDeleteParameter = typeDelete.HasValue ?
                new ObjectParameter("TypeDelete", typeDelete) :
                new ObjectParameter("TypeDelete", typeof(int));
    
            var scheduleIdParameter = scheduleId != null ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(string));
    
            var scheduleDateIdParameter = scheduleDateId != null ?
                new ObjectParameter("ScheduleDateId", scheduleDateId) :
                new ObjectParameter("ScheduleDateId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeleteOneSignalNotificationByEmp", typeDeleteParameter, scheduleIdParameter, scheduleDateIdParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<Sp_GetOneSignalNotificationByEmp_Result> Sp_GetOneSignalNotificationByEmp(Nullable<int> employee)
        {
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("Employee", employee) :
                new ObjectParameter("Employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetOneSignalNotificationByEmp_Result>("Sp_GetOneSignalNotificationByEmp", employeeParameter);
        }
    
        public virtual int Sp_InsertOneSignalNotification(string employees, Nullable<int> accountId, Nullable<int> scheduleId, Nullable<int> scheduleDateId, Nullable<int> notificationType, string notificationHeader, string notificationContent, Nullable<bool> active, Nullable<int> createUser, Nullable<System.DateTime> createDate)
        {
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var scheduleDateIdParameter = scheduleDateId.HasValue ?
                new ObjectParameter("ScheduleDateId", scheduleDateId) :
                new ObjectParameter("ScheduleDateId", typeof(int));
    
            var notificationTypeParameter = notificationType.HasValue ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(int));
    
            var notificationHeaderParameter = notificationHeader != null ?
                new ObjectParameter("NotificationHeader", notificationHeader) :
                new ObjectParameter("NotificationHeader", typeof(string));
    
            var notificationContentParameter = notificationContent != null ?
                new ObjectParameter("NotificationContent", notificationContent) :
                new ObjectParameter("NotificationContent", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var createUserParameter = createUser.HasValue ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertOneSignalNotification", employeesParameter, accountIdParameter, scheduleIdParameter, scheduleDateIdParameter, notificationTypeParameter, notificationHeaderParameter, notificationContentParameter, activeParameter, createUserParameter, createDateParameter);
        }
    
        public virtual int Sp_UpdateOneSignalNotification(Nullable<int> id, string employees, Nullable<int> scheduleId, Nullable<int> scheduleDateId, string notificationHeader, string notificationContent, Nullable<int> typeUpdate, Nullable<int> updateUser, Nullable<System.DateTime> updateDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var scheduleDateIdParameter = scheduleDateId.HasValue ?
                new ObjectParameter("ScheduleDateId", scheduleDateId) :
                new ObjectParameter("ScheduleDateId", typeof(int));
    
            var notificationHeaderParameter = notificationHeader != null ?
                new ObjectParameter("NotificationHeader", notificationHeader) :
                new ObjectParameter("NotificationHeader", typeof(string));
    
            var notificationContentParameter = notificationContent != null ?
                new ObjectParameter("NotificationContent", notificationContent) :
                new ObjectParameter("NotificationContent", typeof(string));
    
            var typeUpdateParameter = typeUpdate.HasValue ?
                new ObjectParameter("TypeUpdate", typeUpdate) :
                new ObjectParameter("TypeUpdate", typeof(int));
    
            var updateUserParameter = updateUser.HasValue ?
                new ObjectParameter("UpdateUser", updateUser) :
                new ObjectParameter("UpdateUser", typeof(int));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateOneSignalNotification", idParameter, employeesParameter, scheduleIdParameter, scheduleDateIdParameter, notificationHeaderParameter, notificationContentParameter, typeUpdateParameter, updateUserParameter, updateDateParameter);
        }
    }
}
